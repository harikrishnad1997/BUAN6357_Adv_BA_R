hist(data$RestingBP,xlab = "RestingBP",main = "Histogram of RestingBP")
hist(data$Cholesterol,xlab = "Cholesterol",main = "Histogram of Cholesterol")
hist(data$Cholesterol,xlab = "Cholesterol",main = "Histogram of Cholesterol")
hist(data$Oldpeak,xlab = "Oldpeak",main = "Histogram of Oldpeak")
pie(table(data$HeartDisease),labels = names(data$HeartDisease),main = "Heart Disease")
barplot(table(data$HeartDisease),main = "Heart Disease")
install.packages("pROC")
install.packages("caret")
require(caret)
require(pROC)
model <- function(classifier) {
classifier_fit <- train(x_train, y_train, method = "glm", family = "binomial",
trControl = trainControl(method = "cv", number = 10))
prediction <- predict(classifier_fit, newdata = x_test)
cv <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
acc <- confusionMatrix(prediction, y_test)$overall["Accuracy"]
roc_auc <- roc(y_test, prediction)
print(paste("Accuracy:", sprintf("%.2f%%", acc*100)))
print(paste("Cross Validation Score:", sprintf("%.2f%%",
trainControl(method = "cv", number = 10)$summary$auc)))
print(paste("ROC_AUC Score:", sprintf("%.2f%%", auc(roc_auc)*100)))
plot(roc_auc, main = "ROC_AUC_Plot")
}
model_evaluation <- function(classifier) {
# Confusion Matrix
cm <- confusionMatrix(predict(classifier, x_test), y_test)
names <- c('True Neg', 'False Pos', 'False Neg', 'True Pos')
counts <- cm$table
percentages <- sprintf("%.2f%%", 100*cm$byClass)
labels <- paste(names, "\n", counts, "\n", percentages, sep="")
labels <- matrix(labels, nrow=2, ncol=2, byrow=TRUE)
colnames(labels) <- c('Heart Disease: No', 'Heart Disease: Yes')
rownames(labels) <- c('Prediction: No', 'Prediction: Yes')
heatmap(labels, cexRow=1.5, cexCol=1.5, margins=c(5,5))
# Classification Report
print(caret::confusionMatrix(predict(classifier, x_test), y_test))
}
classifier_lr <- glm(HeartDisease ~., data = train_data, family = "binomial")
features <- data[, !(names(data) %in% c('HeartDisease', 'RestingBP', 'RestingECG'))]
target <- data$HeartDisease
set.seed(2)
split <- sample.split(target, SplitRatio = 0.2)
??sample.split
features <- data[, !(names(data) %in% c('HeartDisease', 'RestingBP', 'RestingECG'))]
target <- data$HeartDisease
set.seed(2)
split <- sample(1:nrow(data), 0.8*nrow(data))
x_train <- features[split, ]
features <- data[, !(names(data) %in% c('HeartDisease', 'RestingBP', 'RestingECG'))]
target <- data$HeartDisease
set.seed(2)
trainIndex <- sample(1:nrow(data), 0.8*nrow(data))
x_train <- features[trainIndex, ]
seed    <- 504737137
set.seed(seed)
frac <- 0.1
tst <- sample(n,ceiling(frac*n))
seed    <- 504737137
set.seed(seed)
n <- nrow(data)
frac <- 0.2
tst <- sample(n,ceiling(frac*n))
train <- data[-tst,]
test <- data[tst,]
?train
?predict
?confusionMatrix
??confusionMatrix
require(caret)
remove.packages("caret", lib="~/Library/R/arm64/4.2/library")
install.packages("caret")
install.packages("caret",dependencies = T)
require(caret)
install.packages("caret", dependencies = TRUE)
?confusionMatrix
??
confusionMatrix
install.packages("ROCR")
install.packages("ROCR",dependencies = T)
require(data.table)
require(tidyverse)
require(partykit)
require(psych)
require(caret)
require(ROCR)
?prediction
error_eval      <- function(lbl,v) {
sse <- sum(v^2)
mse <- sse/length(v)
return(data.table(lbl=lbl,sse=sse,mse=mse,rmse=sqrt(mse))) }
model_eval <- function(pred,test){
roc <- roc(pred,test)
pred <- prediction(pred,test)
perf <- performance(pred, "tpr", "fpr")
graph <- plot(perf, main = "ROC Curve", colorize = TRUE)
acc <- confusionMatrix(pred,test)
return(list(perf=perf,acc=acc,plot=graph,roc=roc))
}
install.packages("randomForest")
install.packages("randomForest",dependencies = T)
rfModel      <- randomForest(fmla,train)
require(randomForest)
rfModel      <- randomForest(fmla,train)
fmla <- HeartDisease~.
rfModel      <- randomForest(fmla,train)
rfPred <- predict(rfModel,test)
rfPred
error_eval      <- function(lbl,v) {
sse <- sum(v^2)
mse <- sse/length(v)
return(data.table(lbl=lbl,sse=sse,mse=mse,rmse=sqrt(mse))) }
model_eval <- function(pred,test){
roc <- roc(pred,test)
pred <- prediction(pred,test)
perf <- performance(pred, "tpr", "fpr")
graph <- plot(perf, main = "ROC Curve", colorize = TRUE)
acc <- confusionMatrix(pred,test)
return(list(perf=perf,acc=acc,plot=graph,roc=roc))
}
error_eval(rfPred,test$HeartDisease)
model_eval(rfPred,test$HeartDisease)
model_eval <- function(model,pred,test){
roc <- roc(pred,test)
#pred <- prediction(model,test)
#perf <- performance(pred, "tpr", "fpr")
#graph <- plot(perf, main = "ROC Curve", colorize = TRUE)
acc <- confusionMatrix(pred,test)
return(list(acc=acc,roc=roc))
}
model_eval(rfPred,test$HeartDisease)
?roc
require(pROC)
str(rfPred)
test$predict <- rfPred
model_eval(predict ~ HeartDisease ,data = test)
roc(predict ~ HeartDisease ,data = test)
model_eval <- function(model,pred,test){
#roc <- roc(pred,test)
#pred <- prediction(model,test)
#perf <- performance(pred, "tpr", "fpr")
#graph <- plot(perf, main = "ROC Curve", colorize = TRUE)
acc <- confusionMatrix(pred,test)
return(list(acc=acc))
}
model_eval(rfPred,test$HeartDisease)
??confusionMatrix
require(caret)
model_eval <- function(model,pred,test){
#roc <- roc(pred,test)
#pred <- prediction(model,test)
#perf <- performance(pred, "tpr", "fpr")
#graph <- plot(perf, main = "ROC Curve", colorize = TRUE)
acc <- caret::confusionMatrix(pred,test)
return(list(acc=acc))
}
model_eval(rfPred,test$HeartDisease)
require(data.table)
require(tidyverse)
require(partykit)
require(psych)
require(caret)
require(pROC)
data <- fread("heart.csv",stringsAsFactors = T)
str(data)
describe(data)
require(ggplot2)
require(GGally)
ggpairs(data)
#ggsave("ggpairs_data.png", width = 10, height = 10, dpi = 300,limitsize = FALSE)
data[,HeartDisease:=as.factor(HeartDisease)]
ggpairs(data,column=1:11,ggplot2::aes(colour=HeartDisease))
#ggsave("ggpairs_hd_data.png", width = 10, height = 10, dpi = 300,limitsize = FALSE)
#dev.off()
na <- is.na(data)
all(na == T)
data_desc <- describe(data,IQR = TRUE)
data_desc
data_hd_desc <- describeBy(data,data$HeartDisease,IQR = TRUE)
data_hd_desc
barplot(table(data$Sex), main = "Sex Distribution Plot")
barplot(table(data$ChestPainType), main = "Chest Distribution Plot")
barplot(table(data$FastingBS), main = "FastingBS Distribution Plot")
barplot(table(data$ExerciseAngina), main = "ExerciseAngina Distribution Plot")
barplot(table(data$ST_Slope), main = "ST_Slope Distribution Plot")
barplot(table(data$HeartDisease), main = "Heart Disease Distribution Plot")
hist(data$Age,xlab = "Age",main = "Histogram of Age")
hist(data$RestingBP,xlab = "RestingBP",main = "Histogram of RestingBP")
hist(data$Cholesterol,xlab = "Cholesterol",main = "Histogram of Cholesterol")
hist(data$Cholesterol,xlab = "Cholesterol",main = "Histogram of Cholesterol")
hist(data$Oldpeak,xlab = "Oldpeak",main = "Histogram of Oldpeak")
pie(table(data$HeartDisease),labels = names(data$HeartDisease),main = "Heart Disease")
barplot(table(data$HeartDisease),main = "Heart Disease")
seed    <- 504737137
set.seed(seed)
n <- nrow(data)
frac <- 0.2
tst <- sample(n,ceiling(frac*n))
train <- data[-tst,]
test <- data[tst,]
fmla <- HeartDisease~.
error_eval      <- function(lbl,v) {
sse <- sum(v^2)
mse <- sse/length(v)
return(data.table(lbl=lbl,sse=sse,mse=mse,rmse=sqrt(mse))) }
model_eval <- function(model,pred,test){
#roc <- roc(pred,test)
#pred <- prediction(model,test)
#perf <- performance(pred, "tpr", "fpr")
#graph <- plot(perf, main = "ROC Curve", colorize = TRUE)
acc <- caret::confusionMatrix(pred,test)
return(list(acc=acc))
}
require(randomForest)
rfModel      <- randomForest(fmla,train)
rfPred <- predict(rfModel,test)
table(rfPred,test$HeartDisease)
table(rfPred,test$HeartDisease,dnn=c("Classified","Actual")))
table(rfPred,test$HeartDisease,dnn=c("Classified","Actual"))
cm.rf <- table(rfPred,test$HeartDisease,dnn=c("Classified","Actual"))
sum(diag(cm.rf))/sum(cm.rf)
rm(list=ls())
demo <- T
require(MASS)
data("airquality")
require(data.table)
require(tidyverse)
require(broom)
raw     <- setDT(na.omit(airquality))[,-c("Day")]
raw$Month <- as.factor(raw$Month)
seed    <- 337337168
n      <- nrow(raw)
b <- 500
fmla <- Ozone ~ .
set.seed(seed)
t2 <- sample(n, size=b*n, replace=T)
c2 <- data.table(g=rep(1:b,each=n),idx=t2)
cl.dt <- c2[,tidy(lm(fmla,data=raw[idx,]),conf.int=T), by=g]
if(demo) {summary(cl.dt)
print(cl.dt)}
set.seed(seed)
t3 <- sample(rep(1:n,b))
c3 <- data.table(g=rep(1:b,each=n),idx=t3)
bal.dt <- c3[,tidy(lm(fmla,data=raw[idx,]),conf.int=T),by=g]
if(demo) {summary(bal.dt)
print(bal.dt)}
ciPNP    <- function(v,ci) {  # data vector, 0 < CI < 1
alpha <- 1-ci                 # area in the tails
z     <- qnorm(1-alpha/2)     # Z for start of upper tail
t     <- mean(v)              # for Paramteric
s     <- sd(v)                # for Parametric
e     <- mean((v-t)^2) # Adding mse
e2 <- scale(v,center = T,scale = F)
lP    <- round(t-z*s,digits = 3)              # lower bound for Parametric CI
uP    <- round(t+z*s ,3)               # upper bound for Parametric CI
bNP   <- c(alpha/2,1-alpha/2) # bounds for Non-Parametric CI
ci    <- quantile(v, bNP)     # actual Non-Parametric CI bounds values
return(data.table(avg=t,stDev=s,mse=round(e,3),loP=lP, mse2 =e2,    hiP=uP,
loNP=round(ci[1],3), hiNP=round(ci[2],3)) )
}
coverage <- 0.95
ci2      <- cl.dt[,ciPNP(estimate,coverage),by=term]
#mse2 <- cl.dt[,round(scale(estimate,center = T)^2,3),by = term]
#mse2 <- cl.dt[,round(mean(scale(estimate,center = T)^2),3),by = term]
print(ci2)
#print(mse2)
ci3      <- bal.dt[,ciPNP(estimate,coverage),by=term]
#mse3 <- bal.dt[,round(mean(scale(estimate,center = T)^2),3),by = term]
print(ci3)
#print(mse3)
m0 <- lm(fmla,data=raw)
p0 <- m0$fitted.values
r0 <- m0$residuals
bs.dt <- as.data.table(tidy(m0,conf.int=T))
summary(m0)
plot_histogram <- function(df) {
# loop through each row and create a histogram
for (i in 1:nrow(df)) {
hist(
rnorm(10000, df$avg[i], df$stDev[i]),
breaks = 20,
main = df$term[i],
xlab = "Value",
ylab = "Frequency",
xlim = c(df$loNP[i], df$hiP[i])
)
abline(v = df$hiP[i], col = "green")
abline(v = df$loP[i], col = "green")
abline(v = df$hiNP[i], col = "red")
abline(v = df$loNP[i], col = "red")
print(df[i])
}
}
#plot_histogram(ci2)
#plot_histogram(ci3)
merged <- subset(merge(ci2,ci3,by='term',suffixes = c("cl", "ba")),select = c("term","loPcl","hiPcl","loNPcl","hiNPcl","loPba","hiPba","loNPba","hiNPba"))
ci2
ci2      <- cl.dt[,ciPNP(estimate,coverage),by=term]
#mse2 <- cl.dt[,round(scale(estimate,center = T)^2,3),by = term]
#mse2 <- cl.dt[,round(mean(scale(estimate,center = T)^2),3),by = term]
print(ci2)
ciPNP    <- function(v,ci) {  # data vector, 0 < CI < 1
alpha <- 1-ci                 # area in the tails
z     <- qnorm(1-alpha/2)     # Z for start of upper tail
t     <- mean(v)              # for Paramteric
s     <- sd(v)                # for Parametric
e     <- mean((v-t)^2) # Adding mse
e2 <- scale(v,center = T,scale = F)
lP    <- round(t-z*s,digits = 3)              # lower bound for Parametric CI
uP    <- round(t+z*s ,3)               # upper bound for Parametric CI
bNP   <- c(alpha/2,1-alpha/2) # bounds for Non-Parametric CI
ci    <- quantile(v, bNP)     # actual Non-Parametric CI bounds values
return(data.table(avg=t,stDev=s,mse=round(e,3),loP=lP, mse2 =e2,    hiP=uP,
loNP=round(ci[1],3), hiNP=round(ci[2],3)) )
}
ci2      <- cl.dt[,ciPNP(estimate,coverage),by=term]
#mse2 <- cl.dt[,round(scale(estimate,center = T)^2,3),by = term]
#mse2 <- cl.dt[,round(mean(scale(estimate,center = T)^2),3),by = term]
print(ci2)
ciPNP    <- function(v,ci) {  # data vector, 0 < CI < 1
alpha <- 1-ci                 # area in the tails
z     <- qnorm(1-alpha/2)     # Z for start of upper tail
t     <- mean(v)              # for Paramteric
s     <- sd(v)                # for Parametric
e     <- scale(v,center = T,scale = F)$V1 # Adding mse
#e2 <- scale(v,center = T,scale = F)
lP    <- round(t-z*s,digits = 3)              # lower bound for Parametric CI
uP    <- round(t+z*s ,3)               # upper bound for Parametric CI
bNP   <- c(alpha/2,1-alpha/2) # bounds for Non-Parametric CI
ci    <- quantile(v, bNP)     # actual Non-Parametric CI bounds values
return(data.table(avg=t,stDev=s,mse=round(e,3),loP=lP,    hiP=uP,
loNP=round(ci[1],3), hiNP=round(ci[2],3)) )
}
ci2      <- cl.dt[,ciPNP(estimate,coverage),by=term]
ciPNP    <- function(v,ci) {  # data vector, 0 < CI < 1
alpha <- 1-ci                 # area in the tails
z     <- qnorm(1-alpha/2)     # Z for start of upper tail
t     <- mean(v)              # for Paramteric
s     <- sd(v)                # for Parametric
e     <- scale(v,center = T,scale = F) # Adding mse
#e2 <- scale(v,center = T,scale = F)
lP    <- round(t-z*s,digits = 3)              # lower bound for Parametric CI
uP    <- round(t+z*s ,3)               # upper bound for Parametric CI
bNP   <- c(alpha/2,1-alpha/2) # bounds for Non-Parametric CI
ci    <- quantile(v, bNP)     # actual Non-Parametric CI bounds values
return(data.table(avg=t,stDev=s,mse=round(e,3),loP=lP,    hiP=uP,
loNP=round(ci[1],3), hiNP=round(ci[2],3)) )
}
ci2      <- cl.dt[,ciPNP(estimate,coverage),by=term]
#mse2 <- cl.dt[,round(scale(estimate,center = T)^2,3),by = term]
#mse2 <- cl.dt[,round(mean(scale(estimate,center = T)^2),3),by = term]
print(ci2)
scale(cl.dt$estimate,center = T,scale = F)
ciPNP    <- function(v,ci) {  # data vector, 0 < CI < 1
alpha <- 1-ci                 # area in the tails
z     <- qnorm(1-alpha/2)     # Z for start of upper tail
t     <- mean(v)              # for Paramteric
s     <- sd(v)                # for Parametric
e     <- mean((v-t)^2) # Adding mse
e2 <- mean(scale(v,center = T,scale = F)^2)
lP    <- round(t-z*s,digits = 3)              # lower bound for Parametric CI
uP    <- round(t+z*s ,3)               # upper bound for Parametric CI
bNP   <- c(alpha/2,1-alpha/2) # bounds for Non-Parametric CI
ci    <- quantile(v, bNP)     # actual Non-Parametric CI bounds values
return(data.table(avg=t,stDev=s,mse=round(e,3),loP=lP,e2=e2,     hiP=uP,
loNP=round(ci[1],3), hiNP=round(ci[2],3)) )
}
ci2      <- cl.dt[,ciPNP(estimate,coverage),by=term]
#mse2 <- cl.dt[,round(scale(estimate,center = T)^2,3),by = term]
#mse2 <- cl.dt[,round(mean(scale(estimate,center = T)^2),3),by = term]
print(ci2)
fmla
merged <- subset(merge(ci2,ci3,by='term',suffixes = c("cl", "ba")),select = c("term","loPcl","hiPcl","loNPcl","hiNPcl","loPba","hiPba","loNPba","hiNPba"))
merged <- merge(merged,subset(bs.dt,select=c("term","conf.low","conf.high")),by="term")
merged
ci3      <- bal.dt[,ciPNP(estimate,coverage),by=term]
#mse3 <- bal.dt[,round(mean(scale(estimate,center = T)^2),3),by = term]
print(ci3)
rm(list=ls())
demo <- T
require(MASS)
data("airquality")
require(data.table)
require(tidyverse)
require(broom)
raw     <- setDT(na.omit(airquality))[,-c("Day")]
raw$Month <- as.factor(raw$Month)
seed    <- 337337168
n      <- nrow(raw)
b <- 500
fmla <- Ozone ~ .
set.seed(seed)
t2 <- sample(n, size=b*n, replace=T)
c2 <- data.table(g=rep(1:b,each=n),idx=t2)
cl.dt <- c2[,tidy(lm(fmla,data=raw[idx,]),conf.int=T), by=g]
if(demo) {summary(cl.dt)
print(cl.dt)}
set.seed(seed)
t3 <- sample(rep(1:n,b))
c3 <- data.table(g=rep(1:b,each=n),idx=t3)
bal.dt <- c3[,tidy(lm(fmla,data=raw[idx,]),conf.int=T),by=g]
if(demo) {summary(bal.dt)
print(bal.dt)}
ciPNP    <- function(v,ci) {  # data vector, 0 < CI < 1
alpha <- 1-ci                 # area in the tails
z     <- qnorm(1-alpha/2)     # Z for start of upper tail
t     <- mean(v)              # for Paramteric
s     <- sd(v)                # for Parametric
e     <- mean((v-t)^2) # Adding mse
e2    <- mean(scale(v,center = T,scale = F)^2)
lP    <- round(t-z*s,digits = 3)              # lower bound for Parametric CI
uP    <- round(t+z*s ,3)               # upper bound for Parametric CI
bNP   <- c(alpha/2,1-alpha/2) # bounds for Non-Parametric CI
ci    <- quantile(v, bNP)     # actual Non-Parametric CI bounds values
return(data.table(avg=t,stDev=s,mse=round(e,3),loP=lP,e2=e2,     hiP=uP,
loNP=round(ci[1],3), hiNP=round(ci[2],3)) )
}
coverage <- 0.95
ci2      <- cl.dt[,ciPNP(estimate,coverage),by=term]
#mse2 <- cl.dt[,round(scale(estimate,center = T)^2,3),by = term]
#mse2 <- cl.dt[,round(mean(scale(estimate,center = T)^2),3),by = term]
print(ci2)
#scale(cl.dt$estimate,center = T,scale = F)
#print(mse2)
ci3      <- bal.dt[,ciPNP(estimate,coverage),by=term]
#mse3 <- bal.dt[,round(mean(scale(estimate,center = T)^2),3),by = term]
print(ci3)
#print(mse3)
m0 <- lm(fmla,data=raw)
p0 <- m0$fitted.values
r0 <- m0$residuals
bs.dt <- as.data.table(tidy(m0,conf.int=T))
summary(m0)
plot_histogram <- function(df) {
# loop through each row and create a histogram
for (i in 1:nrow(df)) {
hist(
rnorm(10000, df$avg[i], df$stDev[i]),
breaks = 20,
main = df$term[i],
xlab = "Value",
ylab = "Frequency",
xlim = c(df$loNP[i], df$hiP[i])
)
abline(v = df$hiP[i], col = "green")
abline(v = df$loP[i], col = "green")
abline(v = df$hiNP[i], col = "red")
abline(v = df$loNP[i], col = "red")
print(df[i])
}
}
#plot_histogram(ci2)
#plot_histogram(ci3)
merged <- subset(merge(ci2,ci3,by='term',suffixes = c("cl", "ba")),select = c("term","loPcl","hiPcl","loNPcl","hiNPcl","loPba","hiPba","loNPba","hiNPba"))
merged <- merge(merged,subset(bs.dt,select=c("term","conf.low","conf.high")),by="term")
merged
g
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
pkgs <- c("RCurl","jsonlite")
for (pkg in pkgs) {
if (! (pkg %in% rownames(installed.packages()))) { install.packages(pkg) }
}
install.packages("h2o", type="source", repos=(c("http://h2o-release.s3.amazonaws.com/h2o/latest_stable_R")))
?cubist
??cubist
install.packages("Cubist")
install.packages("Cubist",dependencies = T)
library(Cubist)
install.packages("stringi")
library(Cubist)
library(AER);library(lmtest)
data(mroz, package='wooldridge')
# restrict to non-missing wage observations
oursample <- subset(mroz, !is.na(wage))
# 1st stage: reduced form
stage1<-lm(educ~exper+I(exper^2)+motheduc+fatheduc, data=oursample)
# 2nd stage
stage2<-lm(log(wage)~educ+exper+I(exper^2)+resid(stage1),data=oursample)
# results including t tests
coeftest(stage2)
setwd("/Users/harikrishnadev/Library/Mobile Documents/com~apple~CloudDocs/School Work/Sem 2/BUAN 6357/BUAN6357/BUAN6357_Adv_BA_R/Exam")
raw <- read.csv("olsData.csv")
raw <- raw[complete.cases(raw),]
require(tidyverse)
require(broom)
require(data.table)
s   <- 410350638
mdl <- V13~.
uF1 <- function (lbl,v,alpha=0.05) {
z    <- qnorm(1-(alpha/2));  m  <- mean(v);   s  <- sd(v)
lbP  <- m-z*s;     ubP <- m+z*s
lo   <- alpha/2;   hi  <- 1-lo
ci   <- quantile(v, c(lo,hi)); mu  <- mean((v-m)^2)
tnm  <- quantile(v, c(.25, .5, .75))
return (data.table(lbl=lbl, m=m, s=s, z=z, lbP=lbP, ubP=ubP,
lbNP=ci[1], ubNP=ci[2],
q1= tnm[1], q2=tnm[2], q3=tnm[3],
mse=mu, rmse=sqrt(mu)))
}
r0  <- lm(mdl,data=raw)
s0  <- tidy(r0,conf.int=T)
as.data.frame(s0)
(n  <- nrow(raw) )
(b  <- 750       )
set.seed(s)
t   <- data.table(grp=rep(1:b,each=n), idx=sample(n,n*b,replace=T))
b1  <- t[,tidy(lm(mdl,data=raw[idx,]),conf.int=T), by=grp]
(s1 <- b1[term!="(Intercept)",uF1("b1",estimate),by=term] )
set.seed(s)
t   <- data.table(grp=rep(1:b, each=n), idx=sample(rep(1:n,b)))
b2  <- t[,tidy(lm(mdl,data=raw[idx,]),conf.int=T), by=grp]
(s2 <- b2[term!="(Intercept)",uF1("b2",estimate),by=term] )
